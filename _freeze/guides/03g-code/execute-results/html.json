{
  "hash": "487a7882b56de03866048d991fd718c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Code\nexecute: \n  output: true\ncode-fold: true\ndraft: true\n---\n\n\n\n\n\nQuarto's superpower is *combining* data with text in one document. This is a major advantage over traditional methods that require copying and pasting into Word or PDF because it allows you to complete entire reports in a single document. To achieve this, you need to understand how Quarto works with code and how to control the code input and output in your documents. \n\n## Code chunks \n**Code chunks are the heart of Quarto.** These are blocks of code that, when Quarto is rendering the document, will be run and the output inserted immediately into the document. A code chunk looks like this:\n\n```{{r}}\n```\n\nThe code chunk is basically a markup that is made of two parts:\n\n1. The opening and closing triple backticks (```) that tell Quarto where the code starts and ends.\n2. The language of the code (e.g., `r`, `python`, `bash`, etc.) that tells Quarto what kind of code it is, encapsulated in curly braces `{}` after the opening backticks.\n\nAnything that you put into a code chunk, Quarto will assume is code and try to run it. **In ENVX1002 we use code chunks to produce figures and tables, which are common components of scientific reports.**\n\n## Running (executing) code\nWhen you render a Quarto document, it will run all the code chunks in the document and insert the output into the document. This is called **executing** the code. For example, if you have a code chunk that looks like below:\n\n```{{r}}\n1 + 1\n```\n\nQuarto shows both the **input** (the code you wrote) and the **output** (the result of running the code):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\nThis is great! But as far as reports go, if all code *input* and *output* are shown, then the report will be very long and hard to read. In fact, just because your report is written in QUarto does not mean it should look like a programming tutorial. It should instead look like any other scientific report, with the code hidden away and only the results shown.\n\nLuckily Quarto has a few options for controlling code input and output in the final document.\n\n## Controlling output\n\n### The ENVX1002 approach: Code folding\n\nIn ENVX1002, we want the best of both worlds:\n- Reports that look professional (like they came from Word)\n- Code that's accessible when needed (for marking and reproducibility)\n\nThe solution? **Code folding!** Instead of completely hiding code with `echo: false`, we use `code-fold: true`. This means:\n- Code is hidden by default (keeping your report clean)\n- Readers can reveal the code by clicking a button (useful for marking!)\n- Your report stays reproducible without looking like a programming tutorial\n\n### Types of output to control\n\nWhen working with R code, there are several types of output you might want to manage:\n\n1. **Code input** (the code itself)\n   - Use `code-fold: true` to hide but keep accessible\n   - Use `echo: false` when you really want it gone\n2. **Results** (numerical output)\n3. **Messages** (information from packages)\n4. **Warnings** (potential problems)\n5. **Errors** (actual problems)\n\nYou can control all of these using chunk options that start with `#|`. Here's how:\n\n### Common scenarios in report writing\n\nLet's look at some typical situations you'll encounter when writing a report:\n\n#### Scenario 1: Loading packages\n\nWhen loading packages, you typically want to hide everything (code and messages):\n\n```{{r}}\n#| include: false\nlibrary(tidyverse)\nlibrary(readxl)\n```\n\n#### Scenario 2: Reading data\n\nFor data reading and exploration, use code folding:\n\n```{{r}}\n#| code-fold: true\n#| message: false\ndata <- mtcars\nglimpse(data)  # Show structure of the data\n```\n\n#### Scenario 3: Creating a figure\n\nFor figures, fold the code but always show the figure:\n\n```{{r}}\n#| code-fold: true\n#| message: false\n#| warning: false\nggplot(mtcars, aes(mpg, wt)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Car Weight vs Fuel Efficiency\")\n```\n\n#### Scenario 4: Statistical analysis\n\nFor key statistics, consider showing the code:\n\n```{{r}}\n#| code-fold: false\nt.test(mtcars$mpg ~ mtcars$am)\n```\n\n### Best practices for reports\n\nHere are some guidelines for what to show/hide in your reports:\n\n1. **Always hide completely** (`include: false`):\n   - Package loading code and messages\n   - Initial data reading\n   - Setup steps\n\n2. **Usually fold** (`code-fold: true`):\n   - Data preparation steps\n   - Figure creation code\n   - Most analyses\n\n3. **Consider showing** (`code-fold: false`):\n   - Key statistical analyses\n   - Important data transformations\n   - Methods that need explanation\n\n### Setting up default options\n\nFor a professional report, use these YAML settings:\n\n````\n---\ntitle: \"My Scientific Report\"\nexecute:\n  code-fold: true    # Hide code by default but keep it accessible\n  message: false     # Hide package messages\n  warning: false     # Hide warnings unless important\n---\n````\n\n### Progressive example: Cleaning up a report\n\nLet's see how to progressively clean up a section of a report:\n\n#### Step 1: Initial code (too messy for a final report)\n\n```{{r}}\n#| eval: false\n# Load packages\nlibrary(tidyverse)\nlibrary(readxl)\n\n# Read data\ndata <- read_excel(\"raw_data.xlsx\")\n\n# Clean data\nclean_data <- data %>%\n  filter(!is.na(temperature)) %>%\n  mutate(date = as.Date(date))\n\n# Create plot\nggplot(clean_data, aes(date, temperature)) +\n  geom_point() +\n  geom_smooth() +\n  theme_minimal()\n\n# Run analysis\nmodel <- lm(temperature ~ date, data = clean_data)\nsummary(model)\n```\n\n#### Step 2: Clean version for the report\n\n```{{r}}\n#| include: false\n# Hide setup completely\nlibrary(tidyverse)\nlibrary(readxl)\ndata <- read_excel(\"raw_data.xlsx\")\n```\n\n```{{r}}\n#| code-fold: true\n#| message: false\n#| warning: false\n# Data preparation and plot with folded code\nclean_data <- data %>%\n  filter(!is.na(temperature)) %>%\n  mutate(date = as.Date(date))\n\nggplot(clean_data, aes(date, temperature)) +\n  geom_point() +\n  geom_smooth() +\n  theme_minimal()\n```\n\n```{{r}}\n#| code-fold: false\n# Show important analysis code\nmodel <- lm(temperature ~ date, data = clean_data)\nsummary(model)\n```\n\nRemember: A good scientific report should look professional and focus on your findings. The code should be there when needed, but it shouldn't steal the show from your scientific narrative!\n",
    "supporting": [
      "03g-code_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}