{
  "hash": "e645438e1e3392f5119157164237a736",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 02 -- Statistical programming\nembed-resources: true\nresources:\n  - data/soil.xlsx\n---\n\n\n\n\n\n\n\n\n::: {.callout-tip}\n## Learning Outcomes\n\nAt the end of this practical students should be able to:\n\n- Acknowledge the importance of academic integrity\n- Import, subset and inspect data in R\n- Calculate simple summary statistics using both R and Excel\n- Generate dynamic reports in Quarto using inline R code\n- Understand how to debug R code\n:::\n\n## Before we begin\nPlease create a new Quarto document in your project folder to practice R code and complete lab exercises. We will go through the process in Exercise 1.\n\nThe following packages are required for this practical:\n\n- `pacman` -- a package for managing the loading of other packages (among other awesome features)\n- `tidyverse` -- a collection of R packages designed for data science\n- `readxl` -- a package for reading Excel files\n- `modeest` -- a package for estimating the mode of a distribution\n- `lubridate` -- a package for working with dates and times\n\nIf you have not already installed these packages, you can do so by adding the following code into a code chunk in your Quarto document:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, readxl, modeest)\n```\n:::\n\n\n\n\n\n\nFinally, please download the data file used in this lab here: [soil.xlsx](data/soil.xlsx).\n\n## Academic integrity\n\nThis exercise encourages students to discuss academic integrity, and in particular the grey areas often present. Your demonstrator will provide you with a number of scenarios to discuss with each other in smaller groups, and then with the class. \n\nIf you are interested in more information on Academic Integrity at the University of Sydney, see the following link: [Academic Integrity](https://www.sydney.edu.au/students/academic-integrity.html). Also ensure you have completed the Academic Honesty Education Module (AHEM). This must be complete before your first assessment is due (next week for ENVX1002). \n\n## Exercise 1: Setting up\n\n### Getting Started - Important!\n\nBefore starting each lab session, you will need to create a new Quarto document to work on the exercises. Follow these steps to set up your lab environment:\n\n1. **Open RStudio Project**\n   - Locate your RStudio project file (`.Rproj`) in your lab folder. This was set up in Lab 01.\n   - Either:\n     a. Open RStudio and use File > Open Project to navigate to your `.Rproj` file\n     b. Double-click the `.Rproj` file directly from your file explorer\n\n::: {.column-margin}\nYour project name should appear in the top-right corner of RStudio.\n:::\n\n2. **Create a New Quarto Document**\n   - Several ways to do it, the easiest is by clicking the \"New File\" button in the toolbar and selecting \"Quarto Document...\"\n   - Give your document a meaningful name (e.g., `Lab 2 Exercises`), leave other options as default and click \"Create\"\n\n3. **Save and Render Your Document**\n   - Click File > Save or press Ctrl+S (Windows) / Cmd+S (Mac)\n   - Name it something meaningful like `lab02_practice.qmd`\n   - Click the \"Render\" button in the editor toolbar to generate the HTML output\n\n::: {.callout-note}\nIf you encounter any issues, please ask your demonstrator for help.\n:::\n\n## Exercise 2: water quality\n\nSulphate (SO~4~) is a key indicator in water quality monitoring and can be used to assess environmental impacts from industry and agriculture. In this exercise, we will explore a dataset of SO~4~ concentrations (mg/kg) in water samples.\n\nThe data is stored in a sheet called \"SO4\" in the MS Excel file, `soil.xlsx`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nso4 <- read_excel(\"data/soil.xlsx\", sheet = \"SO4\")\n```\n:::\n\n\n\n\n\n\n\n::: {.column-margin}\nTry writing and running the code chunks in your own Quarto document to see their outputs. Results will appear below each chunk. See Lab 01 for more information on inserting and running code chunks in Quarto.\n:::\n\nWhen we load data into R for the first time, it is important to check what it looks like (and whether it loaded correctly). The `str()` function is a good way to quickly inspect the data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(so4)\n```\n:::\n\n\n\n\n\n\n**What does the output of `str()` tell us about the data?** You may want to look at the documentation `?str` or search online for more information, but ask your demonstrator if you're still unsure about why we use this function.\n\nSince the data is a data frame object, we have a good idea of what functions we can use to explore it.\nLet's examine the first few rows of our data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(so4)\n```\n:::\n\n\n\n\n\n\n\nLet's calculate some basic descriptive statistics:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean, median, and mode\nmean_so4 <- mean(so4$SO4)\nmedian_so4 <- median(so4$SO4)\nmode_so4 <- mfv(so4$SO4)[1] # Most frequent value using modeest package\n\n# Calculate measures of spread\nrange_so4 <- range(so4$SO4)\niqr_so4 <- IQR(so4$SO4)\nvar_so4 <- var(so4$SO4)\nsd_so4 <- sd(so4$SO4)\n```\n:::\n\n\n\n\n\nWhen reporting statistics in a scientific document, there are two approaches we could take:\n\n#### 1. Basic R output:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 61.92308\n```\n\n\n:::\n\n```{.r .cell-code}\nsd_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.241558\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62.1\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### 2. Inline reporting (recommended):\n\nConsider the following reporting:\n\n> The mean SO~4~ concentration in our samples is 61.92 mg/kg, with a standard deviation of 5.24 mg/kg. The median value is 62.1 mg/kg.\n\nUsing inline R code (approach 2) has several advantages:\n\n- Statistics are seamlessly integrated into your text\n- Numbers are automatically updated if your data changes\n- Results are presented in a reader-friendly format\n\nTo create inline R code, use backticks with r, like this:\n\n```\nThe mean SO~4~ concentration in our samples is 61.92 mg/kg\n```\nTry to recreate the report above in your Quarto document, or use other objects like `mode_so4` and `var_so4` in your report.\n\n\n\n## Exercise 3: using MS Excel\n\n\n\n## Exercise 3: using MS Excel\n\nLet's calculate the same statistics using Excel to compare approaches. First:\n\n1. Open the `soil.xlsx` file in Excel\n2. Navigate to the \"SO4_excel\" sheet (we'll use this sheet to avoid modifying the original data)\n3. Ensure the data is properly displayed in columns\n\n\n:::{.column-margin}\nMS Excel remains a popular tool for quick and dirty data analysis and can be a valuable resource in just about any field.\n:::\n\n![Imported data in Excel. Make sure to use the \"SO4_excel\" sheet.](images/excel-data.png)\n\nFor any calculation in Excel:\n\n1. Select an empty cell\n2. Type \"`=`\" followed by the function name\n3. Select your data range\n4. Press Enter\n\nFor example, to calculate the mean:\n\n1. Click an empty cell\n2. Type `=AVERAGE(`\n3. Select all SO4 values\n4. Type `)` and press Enter\n\n![Using the `=AVERAGE()` formula in Excel. Note that this screenshot demonstrates the selection of a specific range of data.](images/excel-mean-formula.png)\n\n::: {style=\"color: blue\"}\nCalculate these statistics for the SO~4~ data in Excel:\n\n- For central tendency:\n  - Mean: Use `=AVERAGE()`\n  - Median: Use `=MEDIAN()`\n  - Mode: Use `=MODE()`\n- For spread:\n  - Range: Use `=MAX()` and `=MIN()`\n  - IQR: Use `=QUARTILE.INC()` for Q3 and Q1\n  - Variance: Use `=VAR.S()`\n  - Standard Deviation: Use `=STDEV.S()`\n\n\nWrite notes on how you used these formulas if necessary. You may also want to compare the results with those obtained in R and write down your thoughts on the efficiency and ease of use for each method.\n:::\n\n## Exercise 4: soil data\n\nIn agricultural science, soil characteristics are essential for understanding soil health and fertility. The `soil` sheet in the `soil.xlsx` file contains data on soil properties at different depths, as well as lithology and land use information.\n\nIn this exercise, we'll explore different ways to subset data in R using the soil characteristics data. First, let's load the data:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil <- read_excel(\"data/soil.xlsx\", sheet = \"soil\")\n```\n:::\n\n\n\n\n\n\n### Understanding data structure\nLet's examine our data structure:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(soil)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [55 × 7] (S3: tbl_df/tbl/data.frame)\n $ id       : chr [1:55] \"AT1\" \"AT2\" \"AT3\" \"BM1\" ...\n $ clay0    : num [1:55] 21.26 21.43 4.52 19.37 40.64 ...\n $ clay60   : num [1:55] 30.4 38.2 42.6 24.6 75.6 ...\n $ ec0      : num [1:55] 52.4 34.9 52.8 35.1 46.4 ...\n $ ec60     : num [1:55] 32.6 25.1 38.5 26.4 35.2 ...\n $ lithology: chr [1:55] \"Siliceous Mid\" \"Siliceous Mid\" \"Siliceous Lower\" \"Siliceous Lower\" ...\n $ land_use : chr [1:55] \"Grazing\" \"Grazing\" \"Grazing\" \"Grazing\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(soil)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  id    clay0 clay60   ec0  ec60 lithology       land_use\n  <chr> <dbl>  <dbl> <dbl> <dbl> <chr>           <chr>   \n1 AT1   21.3    30.4  52.4  32.6 Siliceous Mid   Grazing \n2 AT2   21.4    38.2  34.8  25.1 Siliceous Mid   Grazing \n3 AT3    4.52   42.6  52.8  38.5 Siliceous Lower Grazing \n4 BM1   19.4    24.6  35.2  26.4 Siliceous Lower Grazing \n5 BM2   40.6    75.6  46.4  35.2 Mafic           Grazing \n6 BM3   42.7    75.1  50.0  59.7 Mafic           Grazing \n```\n\n\n:::\n:::\n\n\n\n\n\n\n[What do you notice about the data structure that is different from the SO~4~ data?]{style=\"color: blue\"}\n\nThe `soil` data frame contains the following columns:\n  \n- `clay0`: Clay content at 0 cm depth\n- `clay60`: Clay content at 60 cm depth\n- `ec0`: Electrical conductivity at 0 cm depth\n- `ec60`: Electrical conductivity at 60 cm depth\n- `lithology`: Type of soil composition\n- `land_use`: Land usage type\n\n### Basic subsetting in R\n\nThere are two main ways to subset data in R:\n\n1. Using the `$` operator to select columns\n2. Using square brackets `[]` to select rows and columns\n\n#### Using the $ operator\nThe `$` operator allows us to select a specific column from our data frame. For example:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the land use column\nsoil$land_use\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\" \n [7] \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\" \n[13] \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\" \n[19] \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Cropping\" \"Cropping\"\n[25] \"Cropping\" \"Cropping\" \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Grazing\" \n[31] \"Grazing\"  \"Grazing\"  \"Cropping\" \"Cropping\" \"Cropping\" \"Grazing\" \n[37] \"Cropping\" \"Grazing\"  \"Grazing\"  \"Grazing\"  \"Cropping\" \"Grazing\" \n[43] \"Grazing\"  \"Grazing\"  \"Cropping\" \"Grazing\"  \"Grazing\"  \"Grazing\" \n[49] \"Grazing\"  \"Grazing\"  \"Natural\"  \"Natural\"  \"Grazing\"  \"Cropping\"\n[55] \"Cropping\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\nCombined with functions, the `$` operator can be used to calculate statistics on specific columns. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean clay content at 0 cm depth\nmean(soil$clay0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23.198\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.callout-note}\nThe `$` operator is particularly useful when you want to:\n\n- Access a single column quickly\n- Use column values in calculations\n- Create plots with specific variables\n:::\n\n#### Using square brackets []\nSquare brackets allow more flexible subsetting using the format: `dataframe[rows, columns]`. It also works with vectors, lists, and matrices. Try the following examples:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil[1:5, ] # First 5 rows, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  id    clay0 clay60   ec0  ec60 lithology       land_use\n  <chr> <dbl>  <dbl> <dbl> <dbl> <chr>           <chr>   \n1 AT1   21.3    30.4  52.4  32.6 Siliceous Mid   Grazing \n2 AT2   21.4    38.2  34.8  25.1 Siliceous Mid   Grazing \n3 AT3    4.52   42.6  52.8  38.5 Siliceous Lower Grazing \n4 BM1   19.4    24.6  35.2  26.4 Siliceous Lower Grazing \n5 BM2   40.6    75.6  46.4  35.2 Mafic           Grazing \n```\n\n\n:::\n\n```{.r .cell-code}\nsoil[, c(\"clay0\", \"clay60\")] # Clay columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 55 × 2\n   clay0 clay60\n   <dbl>  <dbl>\n 1 21.3    30.4\n 2 21.4    38.2\n 3  4.52   42.6\n 4 19.4    24.6\n 5 40.6    75.6\n 6 42.7    75.1\n 7 28.1    50.5\n 8 41.3    72.6\n 9 48.7    78.7\n10 26.3    50.5\n# ℹ 45 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nsoil[1:3, c(\"ec0\", \"ec60\")] # First 3 rows, electrical conductivity columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n    ec0  ec60\n  <dbl> <dbl>\n1  52.4  32.6\n2  34.8  25.1\n3  52.8  38.5\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.column-margin}\nWhen using `[]`, leaving the row or column section empty (with just a comma) means \"select all\"\n:::\n\n**Basic subsetting**: Use square brackets to extract soil samples at 0cm depth that have clay content greater than 40%.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil[soil$clay0 > 40, ]\n```\n:::\n\n\n\n\n\n\n**Multiple conditions**: Find samples where clay content at 60cm is greater than 30% AND electrical conductivity at 0cm is less than 0.5.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil[soil$clay60 > 30 & soil$ec0 < 0.5, ]\n```\n:::\n\n\n\n\n\n\n::: {style=\"color: blue\"}\n**Practice**: Subset the data to find samples where:\n\n- clay content at 0cm depth is less than 50%\n- electrical conductivity at 60cm depth is greater than 1.5\n- clay content at 0cm is less than 20% OR pH at 60cm is greater than 6.5\n:::\n\n## Exercise 5: soil statistics\n\nWe will continue to work on the soil dataset and practice calculating some basic summary statistics.\n\n::: {style=\"color: blue\"}\n1. Calculate the mean, median, and mode for clay content at 0cm depth\n2. Calculate the range, IQR, variance, and standard deviation for electrical conductivity at 60cm depth\n3. Report these statistics in your Quarto document using inline R code\n:::\n\n## Done!\n\nThis is the end of Lab 02. Remember to save your Quarto document and submit it to Canvas when you're done. If you have any questions, feel free to ask your demonstrator for help.\n\n## Bonus: Take-home exercises\n\nTake-home exercises are optional but recommended for further practice. You can complete these exercises in your own time.\n\n### Exercise 5: Mario Kart statistics\n\nWe're not going to go too much about the game -- but here is a dataset of character attributes from the popular game.\n\nDownload it here: [mario_kart.csv](data/mario_kart.csv)\n\nThe data is stored in a CSV file, which MS Excel can open directly. To read it into R, use the `read_csv()` function from the `readr` package.\n\nThe dataset contains the following variables:\n\n- `character`: Character name\n- `weight`: Character's weight class (1-5 scale)\n- `speed`: Maximum speed rating (1-5 scale)\n- `acceleration`: How quickly they reach top speed (1-5 scale)\n- `handling`: Steering control rating (1-5 scale)\n- `traction`: Grip on different surfaces (1-5 scale)\n- `drift_rating`: Skill at power-sliding around corners (1-5 scale)\n\n::: {style=\"color: blue\"}\nComplete the following exercises using both R and Excel:\n\n1. **Data Import and Inspection**\n   - Load the data into R using `read_csv()`\n   - Examine the structure using `str()`\n   - View the first few rows using `head()`\n   - What do you notice about the data?\n  \n2. **Central Tendency**\n   Calculate for the speed attribute:\n   - Mean\n   - Median\n   - Mode\n   \n   Which measure best represents the \"typical\" speed rating? Why?\n\n3. **Spread Analysis**\n   For the weight attribute, calculate:\n   - Range\n   - IQR\n   - Variance\n   - Standard deviation\n   \n   What do these tell you about the variation in character weights?\n\n4. **Character Comparison**\n   - Which characters have the highest and lowest acceleration?\n   - Find all characters with above-average handling\n   - Identify characters with both speed and weight above 4.0\n\n5. **Advanced Challenge**\n   - Calculate the mean of all attributes for each character\n   - Who is the most \"well-rounded\" character (closest to average in all stats)?\n   - Create a report comparing Mario and Luigi's stats using inline R code\n\n\n:::\n\n## Attribution\n\nThis lab document is licensed under a [Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-nc-sa/4.0/). \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}