{
  "hash": "1f15ccd49334216ebcc34e18e09123d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 02 -- Statistical programming\nembed-resources: false\nresources:\n  - data/soil.xlsx\nexecute:\n  echo: true\n  eval: true\n  result: true\n---\n\n\n\n\n\n\n::: {.callout-tip}\n## Learning Outcomes\n\nAt the end of this practical students should be able to:\n\n- Acknowledge the importance of academic integrity\n- Import, subset and inspect data in R\n- Calculate simple summary statistics using both R and Excel\n- Generate dynamic reports in Quarto using inline R code\n- Write equations in both Quarto and MS Word\n- understand how to debug R code\n:::\n\n## Before we begin\n\nAt the beginnning of each lab, please create a new Quarto document in your project folder. This will be where you will practice R code, write notes and work on the exercises in this lab. We will go through the process together in the Exercise 1.\n\nThe following packages are required for this practical:\n\n- `pacman` -- a package for managing the loading of other packages (among other awesome features)\n-`tidyverse` -- a collection of R packages designed for data science\n- `readxl` -- a package for reading Excel files\n- `modeest` -- a package for estimating the mode of a distribution\n\nIf you have not already installed these packages, you can do so by adding the following code into a code chunk in your Quarto document:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse, readxl, modeest)\n```\n:::\n\n\n\n\nFinally, please download the data file used in this lab here: [soil.xlsx](data/soil.xlsx).\n\n## Academic integrity\n\nThis exercise encourages students to discuss academic integrity, and in particular the grey areas often present. Your demonstrator will provide you with a number of scenarios to discuss with each other in smaller groups, and then with the class. \n\nIf you are interested in more information on Academic Integrity at the University of Sydney, see the following link: [Academic Integrity](https://www.sydney.edu.au/students/academic-integrity.html). Also ensure you have completed the Academic Honesty Education Module (AHEM). This must be complete before your first assessment is due (next week for ENVX1002). \n\n## Exercise 1: Setting up\n\nToday we will go through the process of getting into your RStudio project for labs and set up a new Quarto document. Follow these steps carefully:\n\n1. **Open RStudio Project**\n   - Locate your RStudio project file (`.Rproj`) in your lab folder\n   - Either:\n     a. Open RStudio and use File > Open Project to navigate to your `.Rproj` file\n     b. Double-click the `.Rproj` file directly from your file explorer\n\n::: {.column-margin}\nLook at the top-right corner of your RStudio window. If you've opened the project correctly, you'll see your project name displayed there. This confirms you're working in the right project environment.\n:::\n\n2. **Create a New Quarto Document**\n   - In RStudio, click File > New File > Quarto Document...\n   - In the dialog box that appears:\n     - Choose \"HTML\" as the output format\n     - Give your document a clear title (e.g., \"Lab 02\")\n     - Click \"Create\"\n\n3. **Save Your Document**\n   - Immediately save your new document\n   - Click File > Save or press Ctrl+S (Windows) / Cmd+S (Mac)\n   - Name it something meaningful like `lab02_practice.qmd`\n   - Ensure you save it in your lab project folder\n\n4. **Render the Document**\n   - Click the \"Render\" button in the editor toolbar\n   - Review the output HTML file that appears\n   - Let us know if you encounter any issues\n\n::: {.callout-tip}\n## Pro tips\n- Look for your project name in the top-right corner to confirm you're in the right project\n- Use Ctrl+S (Windows) / Cmd+S (Mac) to save your work frequently\n- Check for missing backticks or brackets if your document won't render\n:::\n\n## Exercise 2: exploring water quality\n\nSulphate (SO~4~) is an important indicator in water quality monitoring, typically measured to assess environmental impacts from industrial and agricultural activities. In this exercise we will calculate basic descriptive statistics for the SO~4~ concentration in water samples. The data is stored in an Excel file with a single sheet named \"SO4\". \n\nFirst, let's load the SO~4~ data from the Excel file:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nso4 <- read_excel(\"data/soil.xlsx\", sheet = \"SO4\")\n```\n:::\n\n\n\n\n\nWhen we load data into R for the first time, it is important to check what it looks like (and whether it loaded correctly). The `str()` function is a good way to quickly inspect the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(so4)\n```\n:::\n\n\n\n\n**What does the output of `str()` tell us about the data?** You may want to look at the documentation `?str` or search online for more information, but ask your demonstrator if you're still unsure about why we use this function.\n\nSince the data is a data frame object, we have a good idea of what functions we can use to explore it.\nLet's examine the first few rows of our data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(so4)\n```\n:::\n\n\n\n\n## Exercise 3: Calculating basic statistics\n\nNow let's calculate some basic descriptive statistics:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean, median, and mode\nmean_so4 <- mean(so4$SO4)\nmedian_so4 <- median(so4$SO4)\nmode_so4 <- mfv(so4$SO4)[1] # Most frequent value using modeest package\n\n# Calculate measures of spread\nrange_so4 <- range(so4$SO4)\niqr_so4 <- IQR(so4$SO4)\nvar_so4 <- var(so4$SO4)\nsd_so4 <- sd(so4$SO4)\n```\n:::\n\n\n\nWhen reporting statistics in a scientific document, there are two approaches we could take:\n\n#### 1. Basic R output (not recommended):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 61.92308\n```\n\n\n:::\n\n```{.r .cell-code}\nsd_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.241558\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian_so4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 62.1\n```\n\n\n:::\n:::\n\n\n\n\n#### 2. Inline reporting (recommended):\n\nConsider the following text:\n\n> The mean SO~4~ concentration in our samples is 61.92 mg/kg, with a standard deviation of 5.24 mg/kg. The median value is 62.1 mg/kg.\n\nUsing inline R code (approach 2) has several advantages:\n\n- Statistics are seamlessly integrated into your text\n- Numbers are automatically updated if your data changes\n- Results are presented in a reader-friendly format\n\nTo create inline R code, use backticks with r, like this:\n\n```\nThe mean SO~4~ concentration in our samples is 61.92 mg/kg\n```\nNow try to recreate the paragraph above in your Quarto document.\n\n\n\n## Exercise 4: doing it in Excel\n\nWhile R is powerful for data analysis, Microsoft Excel remains a widely used tool in just about any setting. Understanding how to perform basic statistical calculations in Excel is valuable for quick analyses and data exploration. \n\nGiven data, you can pick *any* cell to calculate statistics, but it's common to use a new row or column to keep the data and results separate. For this exercise, we'll calculate the same statistical measures as we did in R, but using Excel's built-in functions.\n\nExcel formulas always begin with an equals sign (=) followed by the function name and parentheses containing the data range.\n\n- Select the cell where you want the result to appear\n- Type = to begin the formula\n- Type the function name (e.g., AVERAGE)\n- Enter the data range in parentheses\n- Press Enter to calculate the result\n\n\n![Imported data in Excel.](images/excel-data.png)\n\n\nTo calculate these statistics in Excel:\n\n1. For central tendency:\n   - Mean: Use `=AVERAGE()`\n   - Median: Use `=MEDIAN()`\n   - Mode: Use `=MODE()`\n\n\n\n![Using the `MEAN()` formula in Excel.](images/excel-mean-formula.png)\n\n\n2. For spread:\n   - Range: Use `=MAX()` and `=MIN()`\n   - IQR: Use `=QUARTILE.INC()` for Q3 and Q1\n   - Variance: Use `=VAR.S()`\n   - Standard Deviation: Use `=STDEV.S()`\n\n\n## Exercise 5: soil\n\n\nIn this exercise, we'll explore different ways to subset data in R using the soil characteristics data. First, let's load the data:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoil <- read_excel(\"data/soil.xlsx\", sheet = \"soil\")\n```\n:::\n\n\n\n\n### Understanding data structure\nLet's examine our data structure:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(soil)\nhead(soil)\n```\n:::\n\n\n\n\n### Basic Subsetting in R\n\nThere are two main ways to subset data in R:\n\n1. Using the `$` operator to select columns\n2. Using square brackets `[]` to select rows and columns\n\n#### Using the $ Operator\nThe `$` operator allows us to select a specific column from our data frame. For example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the land use column\nsoil$land_use\n\n# Calculate the mean clay content at 60 cm depth\nmean(soil$clay60)\n```\n:::\n\n\n\n\n::: {.callout-note}\nThe `$` operator is particularly useful when you want to:\n\n- Access a single column quickly\n- Use column values in calculations\n- Create plots with specific variables\n:::\n\n#### Using Square Brackets []\nSquare brackets allow more flexible subsetting using the format: `dataframe[rows, columns]`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First 5 rows, all columns\nsoil[1:5, ]\n\n# Clay columns\nsoil[, c(\"clay0\", \"clay60\")]\n\n# First 3 rows, electrical conductivity columns\nsoil[1:3, c(\"ec0\", \"ec60\")]\n```\n:::\n\n\n\n\n### Practice Questions\n\n1. Using the `$` operator:\n   - Extract all EC (Electrical Conductivity) values\n   - Calculate the mean EC\n   \n2. Using square brackets:\n   - Select rows 10-15 of the dataset\n   - Extract pH values for samples 5-10\n   - Create a subset containing only pH and OC (Organic Carbon) columns\n\n3. Challenge: Create a subset that contains:\n   - Only samples where pH is greater than 7\n   - Only the pH and EC columns\n   \n::: {.callout-tip}\nRemember: \n- When using `[]`, leaving the row or column section empty (with just a comma) means \"select all\"\n- You can use logical conditions inside `[]` to filter data\n:::",
    "supporting": [
      "Lab02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}