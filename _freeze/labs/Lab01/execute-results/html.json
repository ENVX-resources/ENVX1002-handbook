{
  "hash": "d73846a946e67c9c54b4d9c2dca779dc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 01 -- Getting started\nembed-resources: true\nresources:\n  - data/student_scores.csv\n  - data/weather_data.xlsx\nexecute:\n  eval: true\n---\n\n\n\n\n\n\n\n\n::: {.callout-tip}\n## Learning Outcomes\n\nAt the end of this practical students should be able to:\n\n- Install and set up R and RStudio on their computer\n- Understand the relationship between R and RStudio\n- Create and manage R projects effectively\n- Write and render basic Quarto documents\n- Import data from CSV and Excel files\n- Perform basic operations in R\n:::\n\n### Settling in {-}\n\nAt the beginning of the next few weeks we will be doing some short activities before getting into the stats to help you foster a sense of belonging, learn more about your peers, and help better prepare you for your studies. This week we will start with a simple introduction, but before we do this, we would like to acknowledge those who were here before us:\n\n> *We would like to acknowledge and pay respect to the traditional owners of the land on which we meet; the Gadigal people of the Eora Nation. It is upon their ancestral lands that the University of Sydney is built. As we share our own knowledge, teaching, learning and research practices within this university may we also pay respect to the knowledge embedded forever within the Aboriginal Custodianship of Country.*\n\nTo learn more about why we do Acknowledgement of Country, and the difference to Welcome to Country, see the following page: [Welcome and Acknowledgement](https://www.sydney.edu.au/about-us/vision-and-values/our-aboriginal-and-torres-strait-islander-community/kinship-module/learning-module/welcome-and-acknowledgement.html).\n\n### AnswerGardens {-}\n\nWe are all from diverse backgrounds and have followed different paths to get to where we are today. To help you get to know your peers, your demonstrator will lead a class discussion, posting a number of questions on AnswerGarden, where you can then anonymously post your answer to the questions. Links will be provided once your demonstrator has set up the question. \n\nAfter about 20 minutes of discussion, we can get started on the lab! Welcome to ENVX1002!\n\n## Exercise 1: setting up \n\n### Installing R and RStudio\n\nBefore we begin working with data, we need to set up our statistical computing environment. We'll be using two main pieces of software:\n\n1. **R**: The statistical programming language (the engine)\n2. **RStudio**: The integrated development environment (IDE) that makes working with R easier (the interface)\n\n::: column-margin\nThink of R and RStudio like a car: R is the engine that does all the work, while RStudio is the dashboard and controls that make it easier to drive.\n:::\n\nThis week's tutorial would have guided you through the installation process, but if you missed it, below are the steps to install R and RStudio on your personal computer.\n\n::: {.callout-important}\nYou must install R **before** installing RStudio, as RStudio needs R to function.\n:::\n\n#### Installing R\n\n1. Go to the [CRAN (Comprehensive R Archive Network) website](https://cran.r-project.org/)\n2. Click on the link for your operating system\n3. Follow the installation instructions for your system\n   - For Windows: Click \"base\" then download the latest version\n   - For Mac: Choose the appropriate .pkg file for your system (Apple Silicon or Intel)\n   - For Linux: Follow the instructions for your distribution\n\n#### Installing RStudio\n\n1. Visit the [Posit download page](https://posit.co/download/rstudio-desktop/)\n2. Scroll down to \"RStudio Desktop\"\n3. Click the download button for your operating system\n4. Run the installer and follow the prompts\n\n::: {.callout-tip}\nIf you're using a University computer, both R and RStudio should already be installed. However, it's important to install them on your personal computer for working outside of class.\n:::\n\n### Creating your first R project\n\nAn R project is like a container that keeps all your work organised and tidy. Think of it as a dedicated workspace for your course where everything stays together and works smoothly. Here's why R projects are especially helpful for beginners:\n\n::: column-margin\nGood project organisation is crucial for reproducible research. It helps you and others find files easily and ensures your code works consistently.\n:::\n\n- **Consistent starting point**: Every time you open your project, you'll be in the right place with all your files readily available\n- **No more lost files**: Your data, code, and outputs stay together in one organised location\n- **Easier file paths**: You don't need to worry about complex file locations - R projects make it simple to find and use your files\n- **Collaboration ready**: When sharing your work, everything stays organised and works on other computers\n- **Better workflow**: As you learn more complex analyses, having an organised project structure will save you time and prevent headaches\n\nLet's create a project for this course:\n\n1. Open RStudio\n2. Click File → New Project\n3. Choose \"New Directory\"\n4. Click \"New Project\"\n5. Enter \"ENVX1002\" as the directory name\n6. Choose a location on your computer (preferably in a cloud-synced folder)\n7. Click \"Create Project\"\n\nTo keep things simple but organised, let's create one essential folder:\n\n```\nENVX1002/\n├── ENVX1002.Rproj  # This file helps RStudio manage your project\n└── data/           # Store your datasets here\n```\n\nTo create the data folder, any of the following works:\n\n1. In RStudio's Files pane (bottom-right), click \"New Folder\", then name it \"data\"\n2. In the console, run `dir.create(\"data\")` to create the folder\n3. Manually create a folder named \"data\" in your project directory, using Finder(macOS), File Explorer(Windows), or similar\n\n::: {.callout-tip}\nAs you progress in the course, you can create more folders to organise your work. But for now, keeping it simple will help you focus on learning R without getting overwhelmed by complex folder structures.\n:::\n\n## Exercise 2: using Quarto\n\n### What is Quarto?\n\nQuarto is a modern publishing system that allows you to:\n\n::: column-margin\nQuarto documents combine code, text, and output in one file, making your analysis reproducible and easy to share.\n:::\n\n- Combine text, code, and output in one document\n- Create professional reports, presentations, and websites\n- Work with multiple programming languages (including R)\n- Generate high-quality output in various formats (HTML, PDF, Word)\n\nHere are some examples of documents that have been created using Quarto:\n\n- [CVs (curriculum vitae) and resumes](https://github.com/schochastics/quarto-cv) in PDF\n- [Research papers](https://quarto-journals.github.io/elsevier/) for major academic journals\n- And more -- check the [Quarto gallery](https://quarto.org/gallery/)\n\n### Creating your first Quarto document\n\n1. In RStudio, click File → New File → Quarto Document\n2. Fill in the title and author\n3. Click \"Create\"\n4. Save the document (File → Save As...) with a .qmd extension\n\nTo render your document:\n\n1. Click the \"Render\" button (blue arrow) in the editor toolbar\n2. The HTML output will automatically open in your default browser\n\n**If you are rendering your document for the first time, it will fail.** Look out for a yellow box at the top of your source text that prompts you to install the `rmarkdown` package. Install it (by clicking on the install link), wait for the installation to complete, and then render your document again.\n\n#### Basic markdown formatting\n\nQuarto uses markdown for text formatting:\n\n::: column-margin\nMarkdown is a simple way to format text that's easy to read and write. The syntax is designed to be intuitive. Quarto's documentation on markdown can be found [here](https://quarto.org/docs/authoring/markdown-basics.html).\n:::\n\n- **Bold text**: `**bold**`\n- *Italic text*: `*italic*`\n- Headers: `# Level 1`, `## Level 2`, `### Level 3`\n- Lists: Use `-` or `1.` for bullet or numbered lists\n- Links: `[text](URL)`\n- Images: `![alt text](image.png)`\n\n#### Code chunks\n\nCode chunks are where you write and execute R code. They keep your code separate from your text while showing both the code and its output.\n\nCode chunks in Quarto start with ` ```{r} ` and end with ` ``` `:\n\n\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n2 + 2\nmean(c(1, 2, 3, 4, 5))\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\nYou can control chunk behavior with options:\n\n- `echo: false` - Hide the code but show results\n- `eval: false` - Show code but don't run it\n- `warning: false` - Hide warning messages\n- `message: false` - Hide messages\n\nFor example:\n\n````\n```{{r}}\n#| warning: false\n#| message: false\n\n10 / 5\n```\n````\n**Quarto does not run code by default. You need to put R code in code chunks to run them. This is a safety feature to prevent accidental code execution, as well as a means to control the output.**\n\n### Basic R operations\n\nNow that we have our environment set up, let's try some basic R operations. **Don't forget to use code chunks to evaluate the code below**.\n\n::: column-margin\nR uses standard mathematical operators. Remember that `^` means \"to the power of\" and `*` means multiplication.\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Basic arithmetic\n5 + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n\n```{.r .cell-code}\n10 - 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n4 * 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n\n```{.r .cell-code}\n8 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n\n```{.r .cell-code}\n2^3 # Exponentiation\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8\n```\n\n\n:::\n:::\n\n\n\n\n\n\nThat's it for now. We will look more into code chunks next week when we focus on statistical operations.\n\n## Exercise 3: R packages\n\n### What are R packages?\n\nR packages are collections of functions, data, and documentation that extend R's capabilities. Think of them as add-ons or extensions that provide additional functionality beyond what comes with base R. They are essential tools that make R incredibly versatile for different types of analysis.\n\n::: column-margin\nThink of R packages like apps on your phone - they add new features and capabilities to the base system.\n:::\n\n::: {.callout-tip}\nR comes with several built-in packages (called \"base R\"), but thousands more are available for specific tasks, from data manipulation to complex statistical analyses.\n:::\n\n### Installing packages\n\nThere are two main ways to install R packages:\n\n::: column-margin\nYou only need to install a package once, but you need to load it every time you start a new R session.\n:::\n\n1. Using the `install.packages()` function:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Install a single package\ninstall.packages(\"readr\") # DO NOT PUT THIS IN YOUR QUARTO DOCUMENT\n\n# Install multiple packages at once\ninstall.packages(c(\"readr\", \"readxl\")) # DO NOT PUT THIS IN YOUR QUARTO DOCUMENT\n```\n:::\n\n\n\n\n\n\n2. Using the RStudio interface:\n   - Tools → Install Packages...\n   - Type the package name\n   - Click \"Install\"\n\n**Do not include `install.packages()` in your Quarto document.** This particular function is meant to be run in the R console. Including it in your document causes numerous issues, plus why would you want to install a package every time you render your document?\n\n![Don't install packages in your Quarto document!](images/dont-do-this.png)\n\n![Install packages in the console only. Do it once, and you don't need to do it again.](images/install-packages.png)\n\n\n::: {.callout-important}\nYou only need to install a package once on your computer. However, you'll need to load it each time you start a new R session.\n:::\n\n### Loading packages\n\nTo use a package in your R session, you need to load it using the `library()` function:\n\nBelow, we load the `readr` and `readxl` packages because we need to use the `read_csv()` and `read_excel()` functions to import data and these functions are part of these packages.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load individual packages\nlibrary(readr)\nlibrary(readxl)\n```\n:::\n\n\n\n\n\n\n::: column-margin\n#### Optional: `pacman`\nA more efficient way to handle package management is using the `pacman` package. You can read more about it [here](https://trinker.github.io/pacman/vignettes/Introduction_to_pacman.html). **Please do not use `pacman` unless you have read the documentation and are comfortable with it!**\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load multiple packages at once\npacman::p_load(readr, readxl)\n```\n:::\n\n\n\n\n\n:::\n\n::: {.callout-note}\nThe `::` operator in R allows you to use a function from a package without loading the entire package. For example, `readr::read_csv()` uses the `read_csv` function from the `readr` package.\n:::\n\n## Exercise 4: importing data\n\nNow that we understand R packages, let's use some specific ones for importing data. We'll use:\n\n- `readr` for importing CSV files\n- `readxl` for importing Excel files\n\nNote: CSV files are simple text files that can be opened by many programs. Excel files are more complex but can store multiple sheets and formatting. When Excel opens a CSV file, it treats it like a spreadsheet.\n\n### Example data files\n\nBefore we begin, download these example files that we'll use throughout this exercise:\n\n- [Student Scores (CSV)](data/student_scores.csv)\n- [Weather Data (Excel)](data/weather_data.xlsx)\n\nSave these files in your project's `data` folder before proceeding.\n\n### Understanding file paths\n\nFinding and using files on your computer is a bit like giving directions to your house. Let's break down how R finds your files in a way that's easy to understand:\n\n::: column-margin\nThink of your project folder as your home base. Relative paths are like giving directions from there: \"Go to the kitchen, then the fridge.\"\n:::\n\n#### What are file paths?\n\nA file path is simply the address of a file on your computer, telling R exactly where to find it. There are two types of file paths:\n\n1. **Absolute paths** are like complete postal addresses:\n   - They start from the very root of your computer\n   - They work anywhere but are specific to YOUR computer\n   - Examples: \n     - Windows: `C:/Users/YourName/Documents/ENVX1002/data/student_scores.csv`\n     - Mac/Linux: `/Users/YourName/Documents/ENVX1002/data/student_scores.csv`\n\n2. **Relative paths** are like giving directions from where you are now:\n   - They start from your project folder (where your .Rproj file is)\n   - Much shorter and more convenient\n   - Example: `data/student_scores.csv` (meaning \"look in the data folder, then find student_scores.csv\")\n\n#### The working directory concept\n\nYour **working directory** is simply the folder R considers as \"here\" right now:\n\n- When you open an R project, R automatically sets the working directory to that project's folder\n- All relative paths are based on this location\n- You can check your current location with `getwd()` (\"get working directory\")\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This shows your current \"location\" in the computer\ngetwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jhar8696/Documents/ENVX1002-handbook/labs\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n#### How to use paths in practice\n\nIf your project structure looks like this:\n```\nENVX1002/\n├── ENVX1002.Rproj\n├── data/\n│   ├── student_scores.csv\n│   └── weather_data.xlsx\n├── images/\n│   └── quokka.png\n└── reports/\n  └── lab_report.qmd\n```\n\nThen from any R code in your project:\n\n- To access student_scores.csv: use `\"data/student_scores.csv\"`\n- To access weather_data.xlsx: use `\"data/weather_data.xlsx\"`\n- To access quokka.png: use `\"images/quokka.png\"`\n\nIt is important to repeat that this works because you created a project in RStudio. If you were to run the same code outside of RStudio it would not work.\n\n#### Troubleshooting file paths\n\nIf R can't find your file, try these steps:\n\n1. Check the spelling and capitalisation (R is case-sensitive!)\n2. Make sure the file is actually in the location you think it is\n3. Use `list.files(\"data\")` to see all files in your data folder\n4. If using an absolute path, double-check it's correct for your computer\n\n\n::: {.callout-important}\nWhen sharing your code with others or moving your project to a different computer, relative paths (like `\"data/file.csv\"`) will still work, but absolute paths (that include your username and specific computer folders) will break. This is why we recommend always using relative paths in your R projects!\n:::\n\n### Importing CSV files\n\nCSV files are simple text files where data is separated by commas. They're widely used because they're simple and can be read by most software.\n\n::: column-margin\nAlways check your data after importing it. A quick look at the structure and first few rows can catch common issues early.\n:::\n\nTo import a CSV file, we use the `read_csv()` function from the `readr` package:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using a relative path from the project root\nstudent_data <- read_csv(\"data/student_scores.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 10 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (4): student_id, quiz_score, homework_score, final_score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# View the first few rows\nhead(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  student_id quiz_score homework_score final_score\n       <dbl>      <dbl>          <dbl>       <dbl>\n1       1001         85             92          88\n2       1002         78             85          82\n3       1003         92             88          90\n4       1004         65             78          72\n5       1005         88             90          89\n6       1006         72             75          74\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get a summary of the data\nsummary(student_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   student_id     quiz_score   homework_score   final_score   \n Min.   :1001   Min.   :65.0   Min.   :75.00   Min.   :72.00  \n 1st Qu.:1003   1st Qu.:78.0   1st Qu.:82.75   1st Qu.:80.50  \n Median :1006   Median :83.5   Median :86.50   Median :86.50  \n Mean   :1006   Mean   :82.5   Mean   :85.70   Mean   :84.30  \n 3rd Qu.:1008   3rd Qu.:89.5   3rd Qu.:89.50   3rd Qu.:88.75  \n Max.   :1010   Max.   :95.0   Max.   :94.00   Max.   :95.00  \n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.callout-tip}\nAlways try to use relative paths within your R project. This makes your code:\n\n- More portable (works on different computers)\n- Easier to share with others\n- Less likely to break when files move\n:::\n\n### Importing Excel files\n\nFor Excel files, we use the `read_excel()` function from the `readxl` package:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import an Excel file\nweather_data <- read_excel(\"data/weather_data.xlsx\")\n\n# View the first few rows\nhead(weather_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  date                temperature rainfall humidity\n  <dttm>                    <dbl>    <dbl>    <dbl>\n1 2024-01-01 00:00:00        25.5      0         65\n2 2024-01-02 00:00:00        27.8     12.5       78\n3 2024-01-03 00:00:00        24.2      8.2       82\n4 2024-01-04 00:00:00        26.1      0         70\n5 2024-01-05 00:00:00        28.4      0         68\n6 2024-01-06 00:00:00        23.9     15.6       85\n```\n\n\n:::\n\n```{.r .cell-code}\n# Look at the structure of the data\nstr(weather_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [10 × 4] (S3: tbl_df/tbl/data.frame)\n $ date       : POSIXct[1:10], format: \"2024-01-01\" \"2024-01-02\" ...\n $ temperature: num [1:10] 25.5 27.8 24.2 26.1 28.4 23.9 22.8 25.6 27.2 26.8\n $ rainfall   : num [1:10] 0 12.5 8.2 0 0 15.6 22.3 0 0 5.4\n $ humidity   : num [1:10] 65 78 82 70 68 85 88 72 65 75\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: {.callout-note}\nWhen importing data:\n\n- Always check the first few rows using `head()`\n- Look at the data structure using `str()`\n- Check for any missing values using `summary()`\n:::\n\n### Common importing issues\n\nHere are some common issues you might encounter when importing data:\n\n::: column-margin\nData import problems are common but can usually be fixed by specifying the correct options in your import function.\n:::\n\n1. **File path errors**: Ensure you're using the correct path relative to your project directory\n2. **Missing values**: R might interpret empty cells differently than expected\n3. **Column types**: Sometimes R might guess the wrong data type for columns\n4. **Special characters**: Non-ASCII characters might not import correctly\n\nYou can handle these issues using additional arguments in the import functions:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example with more options\nstudent_data <- read_csv(\"data/student_scores.csv\",\n  na = c(\"\", \"NA\", \"missing\"), # Define missing value codes\n  col_types = cols( # Specify column types\n    student_id = col_character(),\n    quiz_score = col_double(),\n    homework_score = col_double(),\n    final_score = col_double()\n  )\n)\n```\n:::\n\n\n\n\n\n\n## Summing up\n\nIn this lab, you've learned:\n\n- [ ] Basic setup: Installing R/RStudio and creating projects\n- [ ] Creating and formatting Quarto documents\n- [ ] Using R packages and basic operations\n- [ ] Importing data from CSV and Excel files\n\n## Take-home exercises\n\n### Exercise 5: Creating a lab report template\n\nCreate a Quarto document that will serve as your template for future lab reports. Your template should include:\n\n1. A YAML header with:\n   - Your name and student ID\n   - The unit of study code (ENVX1002)\n   - The current date\n   - Output format set to HTML\n\n2. The following sections (using appropriate header levels):\n   - Introduction\n   - Methods\n   - Results\n   - Discussion\n   - References\n\n3. Include at least one example of each of these formatting elements:\n   - Bold text\n   - Italic text\n   - A bullet point list\n   - A numbered list\n   - A link to a relevant website\n   - An empty R code chunk\n\nSave this template as `lab_report_template.qmd` in your ENVX1002 project folder.\n\n### Exercise 6: Data exploration practice\n\nCreate a new Quarto document called `data_exploration.qmd` and complete the following tasks:\n\n1. Load the required packages (`readr` and `readxl`)\n\n2. Create a simple data frame with two columns. You may need to use the `data.frame()` function to create this data frame, or you could do this manually in Excel and then import it using one of the `read_*()` functions. The data frame should have the following structure:\n   - `site_id`: A to E\n   - `temperature`: 15.2, 14.8, 15.6, 14.9, 15.3\n\n3. Use these functions to explore your data frame:\n   - `head()` to view the first few rows\n   - `str()` to examine the structure and data types\n   - `dim()` to check the dimensions (rows and columns)\n   - `names()` to see the column names\n\nRemember to add text explanations between your code chunks describing what each function does and what information it provides about your data.\n\n::: {.callout-tip}\nThese exercises will help reinforce the skills you've learned today and create useful resources for future labs. Make sure to render your documents to check that everything works correctly.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}