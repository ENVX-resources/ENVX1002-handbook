---
title: Lab 02 -- Statistical programming
embed-resources: false
resources:
  - data/soil.xlsx
---

```{r setup}
#| include: false
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, readxl, modeest)
```

::: {.callout-tip}
## Learning Outcomes

At the end of this practical students should be able to:

- Acknowledge the importance of academic integrity
- Import, subset and inspect data in R
- Calculate simple summary statistics using both R and Excel
- Generate dynamic reports in Quarto using inline R code
- Write equations in both Quarto and MS Word
- understand how to debug R code
:::

## Before we begin
Please create a new Quarto document in your project folder to practice R code and complete lab exercises. We will go through the process in Exercise 1.

The following packages are required for this practical:

- `pacman` -- a package for managing the loading of other packages (among other awesome features)
-`tidyverse` -- a collection of R packages designed for data science
- `readxl` -- a package for reading Excel files
- `modeest` -- a package for estimating the mode of a distribution

If you have not already installed these packages, you can do so by adding the following code into a code chunk in your Quarto document:

```{r}
#| eval: false
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, readxl, modeest)
```

Finally, please download the data file used in this lab here: [soil.xlsx](data/soil.xlsx).

## Academic integrity

This exercise encourages students to discuss academic integrity, and in particular the grey areas often present. Your demonstrator will provide you with a number of scenarios to discuss with each other in smaller groups, and then with the class. 

If you are interested in more information on Academic Integrity at the University of Sydney, see the following link: [Academic Integrity](https://www.sydney.edu.au/students/academic-integrity.html). Also ensure you have completed the Academic Honesty Education Module (AHEM). This must be complete before your first assessment is due (next week for ENVX1002). 

## Exercise 1: Setting up

Today we will go through the process of getting into your RStudio project for labs and set up a new Quarto document. Follow these steps carefully (we will not provide these instructions in future labs):

1. **Open RStudio Project**
   - Locate your RStudio project file (`.Rproj`) in your lab folder
   - Either:
     a. Open RStudio and use File > Open Project to navigate to your `.Rproj` file
     b. Double-click the `.Rproj` file directly from your file explorer

::: {.column-margin}
Your project name should appear in the top-right corner of RStudio.
:::

2. **Create a New Quarto Document**
   - Several ways to do it, the easiest is by clicking the "New File" button in the toolbar and selecting "Quarto Document..."
   - Give your document a meaningful name (e.g., `Lab 2 Exercises`), leave other options as default and click "Create"

3. **Save and Render Your Document**
  - Click File > Save or press Ctrl+S (Windows) / Cmd+S (Mac)
  - Name it something meaningful like `lab02_practice.qmd`
  - Click the "Render" button in the editor toolbar to generate the HTML output

::: {.callout-note}
If you encounter any issues, please ask your demonstrator for help.
:::

## Exercise 2: water quality

Sulphate (SO~4~) is a key indicator in water quality monitoring, used to assess environmental impacts from industry and agriculture. Let's analyse a small dataset of water quality data to practice some basic statistical calculations in R.

The data is stored in a sheet called "SO4" in the MS Excel file, `soil.xlsx`.

```{r load-so4}
#| message: false
so4 <- read_excel("data/soil.xlsx", sheet = "SO4")
```


::: {.column-margin}
Try writing and running the code chunks in your own Quarto document to see their outputs. Results will appear below each chunk. See Lab 01 for more information on inserting and running code chunks in Quarto.
:::

When we load data into R for the first time, it is important to check what it looks like (and whether it loaded correctly). The `str()` function is a good way to quickly inspect the data:

```{r inspect-data}
#| output: false
str(so4)
```

**What does the output of `str()` tell us about the data?** You may want to look at the documentation `?str` or search online for more information, but ask your demonstrator if you're still unsure about why we use this function.

Since the data is a data frame object, we have a good idea of what functions we can use to explore it.
Let's examine the first few rows of our data:

```{r view-data}
#| output: false
head(so4)
```


Let's calculate some basic descriptive statistics:

```{r basic-stats}
#| message: false
# Calculate mean, median, and mode
mean_so4 <- mean(so4$SO4)
median_so4 <- median(so4$SO4)
mode_so4 <- mfv(so4$SO4)[1] # Most frequent value using modeest package

# Calculate measures of spread
range_so4 <- range(so4$SO4)
iqr_so4 <- IQR(so4$SO4)
var_so4 <- var(so4$SO4)
sd_so4 <- sd(so4$SO4)
```
When reporting statistics in a scientific document, there are two approaches we could take:

#### 1. Basic R output (not recommended):
```{r}
#| output: true
mean_so4
sd_so4
median_so4
```

#### 2. Inline reporting (recommended):

Consider the following report:

> The mean SO~4~ concentration in our samples is `r round(mean_so4, 2)` mg/kg, with a standard deviation of `r round(sd_so4, 2)` mg/kg. The median value is `r round(median_so4, 2)` mg/kg.

Using inline R code (approach 2) has several advantages:

- Statistics are seamlessly integrated into your text
- Numbers are automatically updated if your data changes
- Results are presented in a reader-friendly format

To create inline R code, use backticks with r, like this:

```
The mean SO~4~ concentration in our samples is `r round(mean_so4, 2)` mg/kg
```
**Try to recreate the report above in your Quarto document.**



## Exercise 3: using MS Excel

:::{.column-margin}
MS Excel remains a popular tool for quick and dirty data analysis and can be a valuable resource in just about any field.
:::

Let's compare how to calculate basic statistics in Excel. First, open the `soil.xlsx` file in Excel and navigate to the "SO4" sheet.

![Imported data in Excel.](images/excel-data.png)


For any calculation in Excel:

1. Select an empty cell
2. Type "=" followed by the function name
3. Select your data range
4. Press Enter

For example, to calculate the mean:

1. Click an empty cell
2. Type "=AVERAGE("
3. Select all SO4 values
4. Type ")" and press Enter




Calculate these statistics in Excel:

- For central tendency:
  - Mean: Use `=AVERAGE()`
  - Median: Use `=MEDIAN()`
  - Mode: Use `=MODE()`



![Using the `=AVERAGE()` formula in Excel. Note that this screenshot demonstrates the selection of a specific range of data.](images/excel-mean-formula.png)


- For spread:
  - Range: Use `=MAX()` and `=MIN()`
  - IQR: Use `=QUARTILE.INC()` for Q3 and Q1
  - Variance: Use `=VAR.S()`
  - Standard Deviation: Use `=STDEV.S()`

Write notes on how you used these formulas if necessary. You may also want to compare the results with those obtained in R and write down your thoughts on the efficiency and ease of use for each method.


## Exercise 4: a larger dataset on soil

In agricultural science, soil characteristics are essential for understanding soil health and fertility. The `soil` sheet in the `soil.xlsx` file contains data on soil properties at different depths, as well as lithology and land use information.

In this exercise, we'll explore different ways to subset data in R using the soil characteristics data. First, let's load the data:

```{r load-soil}
#| message: false
soil <- read_excel("data/soil.xlsx", sheet = "soil")
```

### Understanding data structure
Let's examine our data structure:

```{r}
str(soil)
head(soil)
```

**Question: What do you notice about the data structure that is different from the SO~4~ data?**

### Basic subsetting in R

There are two main ways to subset data in R:

1. Using the `$` operator to select columns
2. Using square brackets `[]` to select rows and columns

#### Using the $ operator
The `$` operator allows us to select a specific column from our data frame. For example:

```{r}
# Get the land use column
soil$land_use

# Calculate the mean clay content at 60 cm depth
mean(soil$clay60)
```

::: {.callout-note}
The `$` operator is particularly useful when you want to:

- Access a single column quickly
- Use column values in calculations
- Create plots with specific variables
:::

#### Using square brackets []
Square brackets allow more flexible subsetting using the format: `dataframe[rows, columns]`

```{r}
# First 5 rows, all columns
soil[1:5, ]

# Clay columns
soil[, c("clay0", "clay60")]

# First 3 rows, electrical conductivity columns
soil[1:3, c("ec0", "ec60")]
```

### Practice

1. Using the `$` operator:
   - Extract all EC (Electrical Conductivity) values
   - Calculate the mean EC
   
2. Using square brackets:
   - Select rows 10-15 of the dataset
   - Extract pH values for samples 5-10
   - Create a subset containing only pH and OC (Organic Carbon) columns

3. Challenge: Create a subset that contains:
   - Only samples where pH is greater than 7
   - Only the pH and EC columns
   
::: {.callout-tip}
Remember: 
- When using `[]`, leaving the row or column section empty (with just a comma) means "select all"
- You can use logical conditions inside `[]` to filter data
:::