---
title: Lab 03 -- Exploring and visualising data
embed-resources: false
toc-depth: 2
resources:
  - data/pie_crab.csv
  - data/hbr_maples.csv
execute: 
  cache: true
---

```{r setup}
#| include: false
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, moments, lterdatasampler, patchwork)

# Load data from package (for consistency in solutions)
data("pie_crab", "hbr_maples", package = "lterdatasampler")
```


::: {.callout-tip}
## Learning outcomes

At the end of this computer practical, students should be able to:

- Import and prepare data for visualisation
- Create basic plot types using ggplot2 (histograms, boxplots, bar plots, scatterplots)
- Customise plots with appropriate labels, colours, and themes
- Identify and visualise distribution properties (normality, skewness, kurtosis)
- Interpret visualisations to draw meaningful conclusions
- Export and save plots for reports
:::

## Before we begin

For this lab, you'll need to:

1. Create a new Quarto document in your project folder to practice the code and complete exercises
2. Download the data files from the links provided in Exercise 1
3. Make sure you have the following packages installed and loaded:
   - `tidyverse`: For data manipulation and visualization (includes `ggplot2`)
   - `moments`: For calculating skewness and kurtosis
   - `patchwork`: For combining multiple plots

You can install packages using `install.packages("package_name")` if needed, and load them with `library(package_name)`.


## Exercise 1: Dataset exploration

### Exploring the `pie_crab` dataset

In this lab, we'll work with two environmental datasets. They can be downloaded from the links below:

- [pie_crab.csv](data/pie_crab.csv): Crab size measurements across different sites and latitudes
- [hbr_maples.csv](data/hbr_maples.csv): Maple seedling measurements from different watersheds

By now, you should know how to use `read_csv()` to read these datasets into R. If you need a refresher, refer to the previous labs or ask for help from a demonstrator (if available).

Let's start by exploring the `pie_crab` dataset. We've done this before, but it's always good to refresh our memory as these functions are extremely common to use. 

- The `str()` function shows us the structure of the dataset, including variable names, types, and a preview of the values.
- The `head()` function shows the first six rows of the dataset, giving us a quick look at the data.
- The `summary()` function provides descriptive statistics for each variable, including minimum, maximum, mean, and quartiles for numeric variables.


```{r}
str(pie_crab)
head(pie_crab)
summary(pie_crab)
```


::: {.callout-tip}
## Question 1
What variables are in the dataset? What are the data types of each variable? Are there any missing values? What are the ranges of the numeric variables?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 1
From our exploration of the pie_crab dataset, we can see that:

- The dataset contains 6 variables: date, latitude, site, size, air_temp, and water_temp
- Data types: date is a date variable, latitude is numeric, site is a character/factor, size is numeric (in mm), and both temperature variables are numeric (in °C)
- There don't appear to be any missing values in the dataset based on the summary output
- Ranges of numeric variables:
  - latitude: approximately 36.6 to 41.3 degrees
  - size: approximately 3.1 to 38.2 mm
  - air_temp: approximately 14.0 to 37.8 °C
  - water_temp: approximately 14.5 to 36.0 °C

This information helps us understand the structure and content of our dataset before creating visualizations.
:::
:::

From our exploration, we can see that the pie_crab dataset contains information about:

- `date`: When the crabs were measured
- `latitude`: The latitude where the crabs were collected
- `site`: The specific collection site
- `size`: The size of the crabs in millimeters
- `air_temp`: Air temperature in degrees Celsius
- `water_temp`: Water temperature in degrees Celsius

### Identifying factors in the data

One of the first steps in data exploration is to determine if your data types are recognised correctly by R, as R simply treats everything as a character when it doesn't know what it is. Looking at the output of `str()` can help you identify a data type that could be something more.

Hopefully you can see that `site` and `name` pop out as being character variables, but appear to have repeating values. This is a good sign that they should be factors. We can quickly check this by using the `unique()` function to see all the unique values in a variable. If there are only a few unique values compared to the number of observations, it's a good sign that it should be a factor.

```{r}
unique(pie_crab$site)
unique(pie_crab$name)
```

For a dataset with 392 observations, having only `r length(unique(pie_crab$site))` unique sites and `r length(unique(pie_crab$name))` unique names suggests that these variables should be factors. We can convert them using the `factor()` function:

```{r}
# Convert site and name to factors
pie_crab$site <- factor(pie_crab$site)
pie_crab$name <- factor(pie_crab$name)
```

Notice how we've converted the specific variables to factors, and used the assignment operator `<-` to update the dataset. This is a common pattern in R, where we update the dataset in place.

You can run `str(pie_crab)` again to confirm that the variables have been converted to factors.


## Exercise 2: Building visualizations with `ggplot2`

### The Grammar of Graphics

The ggplot2 package is based on the "Grammar of Graphics," a framework that breaks visualisations into components, similar to how grammar breaks language into parts of speech. This approach makes it possible to create complex visualisations by combining simple elements.

The key components include:

- **Data**: The dataset being visualised
- **Aesthetics**: Mappings from data variables to visual properties
- **Geometries**: The shapes used to represent the data
- **Facets**: Subplots that show different subsets of the data
- **Statistics**: Transformations of the data (e.g., counts, means)
- **Coordinates**: The space in which the data is plotted
- **Themes**: Visual styling of non-data elements

Let's learn how to create visualisations using this approach by building a plot step by step, explaining each component along the way.

### Step 1: The canvas

Every ggplot2 visualisation starts with a blank canvas:

```{r}
# Start with an empty canvas
ggplot()
```

This creates an empty plotting space. It doesn't show anything yet because we haven't specified any data or how to visualise it.

### Step 2: Adding data

Next, we tell ggplot2 what data to use:

```{r}
# Add data to the plot
ggplot(data = pie_crab)
```

We've now told ggplot2 to use the pie_crab dataset, but we still don't see anything because we haven't specified which variables to plot or how to represent them.

### Step 3: Mapping Aesthetics

Aesthetics map variables in your data to visual properties in the plot:

```{r}
# Map variables to visual properties
ggplot(data = pie_crab, mapping = aes(x = size))
```

Here, we've mapped the `size` variable to the x-axis. We still don't see any data points because we haven't specified how to represent the data (e.g., as points, bars, or lines).

### Step 4: Adding a Geometry

Geometries determine how the data is represented visually:

```{r}
# Add a histogram geometry
ggplot(data = pie_crab, mapping = aes(x = size)) +
  geom_histogram()
```

Now we can see the data! We've added a histogram geometry (`geom_histogram()`), which counts the number of observations falling into bins along the x-axis. The `+` operator adds layers to the plot.

Notice the message about the default bin width. ggplot2 automatically chose 30 bins, but we can adjust this.

### Step 5: Customizing the Geometry

Let's customize our histogram:

```{r}
# Customize the histogram
ggplot(data = pie_crab, mapping = aes(x = size)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black")
```

We've made several changes:

- `bins = 20`: Changed the number of bins to 20
- `fill = "skyblue"`: Set the fill color of the bars to sky blue
- `color = "black"`: Set the outline color of the bars to black

These are fixed properties applied to all bars, not mappings from data variables.

### Step 6: Adding Labels and Titles

Good visualisations have clear labels:

```{r}
# Add informative labels
ggplot(data = pie_crab, mapping = aes(x = size)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Crab Sizes",
    x = "Size (mm)",
    y = "Count"
  )
```

The `labs()` function adds various text elements to the plot:

- `title`: The main title of the plot
- `x`: The x-axis label
- `y`: The y-axis label

### Step 7: Applying a Theme

Themes control the overall appearance of the plot:

```{r}
# Add a theme for consistent styling
ggplot(data = pie_crab, mapping = aes(x = size)) +
  geom_histogram(bins = 20, fill = "skyblue", color = "black") +
  labs(
    title = "Distribution of Crab Sizes",
    x = "Size (mm)",
    y = "Count"
  ) +
  theme_minimal()
```

The `theme_minimal()` function applies a minimalist theme with a white background and subtle grid lines. Other common themes include:

- `theme_classic()`: No grid lines, simple axes
- `theme_light()`: Light background with subtle grid lines
- `theme_dark()`: Dark background for presentations

### Adding Multiple Geometries

One of the powerful features of ggplot2 is the ability to layer multiple geometries:

```{r}
# Add a density curve on top of the histogram
ggplot(data = pie_crab, mapping = aes(x = size)) +
  geom_histogram(aes(y = after_stat(density)),
    bins = 20,
    fill = "skyblue", color = "black"
  ) +
  geom_density(color = "red", linewidth = 1) +
  labs(
    title = "Distribution of Crab Sizes",
    x = "Size (mm)",
    y = "Density"
  ) +
  theme_minimal()
```

In this plot:

- We've changed the y-axis of the histogram to show density instead of count using `aes(y = after_stat(density))`
- We've added a density curve with `geom_density()`
- We've set the density curve color to red and increased its line width

::: {.callout-tip}
## Question 2
1. What's the difference between setting a fixed property (like `fill = "blue"`) and mapping a variable to an aesthetic (like `aes(fill = site)`)?
2. How would you modify the histogram to have more or fewer bins?
3. What would happen if you changed the order of the `geom_histogram()` and `geom_density()` layers?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 2

1. **Fixed property vs. aesthetic mapping**:
   - Fixed property (e.g., `fill = "blue"`): Applies the same value to all elements, regardless of data values
   - Aesthetic mapping (e.g., `aes(fill = site)`): Maps a variable in your data to a visual property, creating different values based on the data
   - Fixed properties are used for consistent styling, while aesthetic mappings are used to represent data values visually

2. **Modifying histogram bins**:
   - To change the number of bins: Use the `bins` parameter (e.g., `geom_histogram(bins = 30)`)
   - To specify bin width directly: Use the `binwidth` parameter (e.g., `geom_histogram(binwidth = 2)`)
   - Fewer bins show broader patterns but less detail, while more bins show more detail but may be noisier

3. **Changing layer order**:
   - If `geom_density()` came before `geom_histogram()`, the histogram would be drawn on top of the density curve
   - This would make the density curve partially or completely hidden behind the histogram
   - Layer order matters because layers are drawn in the order they are added, with later layers appearing on top
:::
:::

## Exercise 3: Analyzing environmental variables

Now that we understand the Grammar of Graphics approach, let's analyze a different variable in our dataset.

### Examining water temperature distribution

Let's examine the distribution of water temperatures across our sampling sites:

```{r}
# Create a basic histogram of water temperatures
ggplot(pie_crab, aes(x = water_temp)) +
  geom_histogram(bins = 15) +
  labs(
    title = "Distribution of Water Temperatures",
    x = "Water Temperature (°C)",
    y = "Count"
  )
```

The histogram shows us the frequency distribution of water temperatures. We can see the shape of the distribution, including any skewness or unusual patterns.

```{r}
# Add a density curve
ggplot(pie_crab, aes(x = water_temp)) +
  geom_histogram(aes(y = after_stat(density)),
    bins = 15,
    fill = "lightblue", colour = "black"
  ) +
  geom_density(colour = "red") +
  labs(
    title = "Distribution of Water Temperatures",
    x = "Water Temperature (°C)",
    y = "Density"
  )
```

Adding a density curve helps us see the overall shape of the distribution more clearly.

::: {.callout-tip}
## Question 3
What is the shape of the distribution of water temperatures? Does the distribution appear to be normal? Are there any outliers? How might water temperature affect crab biology?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 3
Based on the histogram and density plot of water temperatures:

- **Shape of the distribution**: The distribution appears to be right-skewed (positively skewed), with a longer tail extending toward higher temperatures.

- **Normality**: The distribution does not appear to be perfectly normal. A normal distribution would be symmetric around the mean, but this distribution shows some asymmetry. The density curve helps visualize this deviation from normality.

- **Outliers**: There appear to be a few potential outliers on the right side of the distribution, representing unusually warm water temperatures. These can be seen as isolated bars in the histogram at the right end of the distribution.

- **Biological implications**: Water temperature is a critical environmental factor for crabs as it affects their metabolism, growth rate, and behavior. Crabs are ectothermic (cold-blooded), so their body temperature and physiological processes are directly influenced by the temperature of their environment. Higher water temperatures generally increase metabolic rates up to a point, potentially leading to faster growth in warmer waters. However, extremely high temperatures can be stressful or even lethal. The variation in water temperatures across sampling sites might help explain some of the variation we see in crab sizes.

These observations are important for understanding the environmental conditions across our sampling sites and how they might influence the biological characteristics we're studying.
:::
:::

### Skewness and Kurtosis

To quantify the shape of the water temperature distribution, we can calculate skewness and kurtosis:

```{r}
# Calculate skewness and kurtosis for water temperature
skewness_value <- skewness(pie_crab$water_temp)
kurtosis_value <- kurtosis(pie_crab$water_temp)

# Print the values
cat("Skewness of water temperature:", skewness_value, "\n")
cat("Kurtosis of water temperature:", kurtosis_value, "\n")
```

**Interpreting these values:**

- **Skewness** measures the asymmetry of the distribution:

  - 0 = symmetric (like a normal distribution)
  - > 0 = right-skewed (tail extends to the right)
  - < 0 = left-skewed (tail extends to the left)

- **Kurtosis** measures the "tailedness" of the distribution:

  - 3 = normal distribution (in the `moments` package, this is sometimes normalized to 0)
  - > 3 = leptokurtic (heavy-tailed, more outliers)
  - < 3 = platykurtic (light-tailed, fewer outliers)

The skewness value of approximately 0.5 confirms our visual observation that the water temperature distribution is moderately right-skewed. The kurtosis value of approximately 2.5 indicates the distribution has slightly lighter tails than a normal distribution.

These numerical measures help us quantify what we observe visually in the histograms and density plots. Now that we understand the overall distribution of our data, let's explore how it varies across different groups.

## Exercise 4: Comparing groups

Now that we've examined the overall distribution of crab sizes, let's compare sizes across different groups.

### Creating boxplots to compare sites

Boxplots are excellent for comparing distributions between groups:

```{r}
# Create boxplots of crab sizes by site
ggplot(pie_crab, aes(x = site, y = size)) +
  geom_boxplot(fill = "skyblue") +
  labs(
    title = "Crab Sizes by Site",
    x = "Site",
    y = "Size (mm)"
  )
```

A boxplot shows:

- The median (middle line)
- The interquartile range (IQR) from the 25th to 75th percentile (the box)
- The whiskers (typically extend to 1.5 × IQR)
- Outliers (points beyond the whiskers)

To see the actual data points alongside the boxplots:

```{r}
# Add points to see the actual data
ggplot(pie_crab, aes(x = site, y = size)) +
  geom_boxplot(fill = "skyblue", alpha = 0.5) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  labs(
    title = "Crab Sizes by Site",
    x = "Site",
    y = "Size (mm)"
  )
```

We've added:

- `geom_jitter()` to add individual data points with a slight horizontal jitter to avoid overplotting
- `alpha = 0.5` to make both the boxplots and points semi-transparent
- `width = 0.2` to control the amount of horizontal jittering

::: {.callout-tip}
## Question 4
How do crab sizes vary across different sites? Which site has the largest median crab size? Which site shows the most variability in crab sizes? Are there any outliers at specific sites?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 4
Based on the boxplots comparing crab sizes across different sites:

- **Variation across sites**: There is considerable variation in crab sizes between sites. Some sites (like Oregon) have generally larger crabs, while others (like Woods Hole) have smaller crabs.

- **Largest median size**: Oregon appears to have the largest median crab size, as indicated by the highest middle line in its boxplot.

- **Most variability**: Rhode Island shows the most variability in crab sizes, as evidenced by its wider box (larger interquartile range) and longer whiskers, indicating a broader spread of sizes.

- **Outliers**: Yes, there are outliers at specific sites. Woods Hole has a few outliers on the upper end (unusually large crabs for that site), shown as individual points above the upper whisker. These outliers represent crabs that are substantially larger than is typical for that location.

The addition of jittered points to the boxplots helps visualize the actual distribution of data points within each site, giving us a better understanding of the sample size and distribution at each location. This comparison across sites suggests that geographic location plays an important role in determining crab size distributions.
:::
:::

### Exploring the relationship between latitude and size

Let's examine if there's a relationship between latitude and crab size:

```{r}
# Create a scatterplot of size vs. latitude
ggplot(pie_crab, aes(x = latitude, y = size)) +
  geom_point(alpha = 0.5) +
  labs(
    title = "Crab Size vs. Latitude",
    x = "Latitude",
    y = "Size (mm)"
  )
```

Scatterplots show the relationship between two continuous variables. Each point represents a single observation.

To help visualize the trend, we can add a trend line:

```{r}
# Add a trend line
ggplot(pie_crab, aes(x = latitude, y = size)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(
    title = "Crab Size vs. Latitude",
    x = "Latitude",
    y = "Size (mm)"
  )
```

We've added:

- `geom_smooth(method = "lm")` to add a linear regression line
- `se = TRUE` to include the standard error as a shaded confidence band

::: {.callout-tip}
## Question 5
Is there a relationship between latitude and crab size? What does the trend line suggest about this relationship? What might explain this relationship from an ecological perspective?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 5
Based on the scatterplot examining the relationship between latitude and crab size:

- **Relationship existence**: Yes, there appears to be a relationship between latitude and crab size. The points show a pattern rather than being randomly scattered, suggesting a correlation between these variables.

- **Trend line interpretation**: The trend line shows a negative relationship between latitude and crab size. As latitude increases (moving northward), crab size tends to decrease. The slope of the line indicates that for each degree increase in latitude, there is an approximate decrease in crab size of several millimeters. The shaded confidence band around the line is relatively narrow, suggesting we can be fairly confident in this relationship.

- **Ecological explanation**: This pattern could be explained by several ecological factors:
  1. **Temperature gradient**: Lower latitudes (more southern locations) typically have warmer waters, which might promote faster growth or larger body sizes in crabs.
  2. **Food availability**: Different latitudes may have different food resources available, affecting growth potential.
  3. **Adaptation to local conditions**: Crabs at different latitudes might have evolved different body sizes as adaptations to local environmental pressures.
  4. **Bergmann's rule**: This is the opposite of what Bergmann's rule would predict (which states that organisms within a species are larger in colder environments), suggesting that other factors may be more important for these crabs.

This relationship demonstrates how geographic location can influence biological characteristics, highlighting the importance of considering spatial factors in ecological studies.
:::
:::

## Exercise 5: Faceting and grouping

So far, we've created separate plots for different analyses. Now, let's explore techniques for comparing multiple groups or variables within a single plot.

### Exploring the `hbr_maples` dataset

Let's switch to our second dataset, which contains measurements of maple seedlings from different watersheds:

```{r}
# Examine the structure of the maples dataset
str(hbr_maples)
```

```{r}
# View the first few rows
head(hbr_maples)
```

```{r}
# Get a summary of the variables
summary(hbr_maples)
```

Now, let's create histograms of stem length by watershed using faceting:

```{r}
# Create histograms of stem length by watershed
ggplot(hbr_maples, aes(x = stem_length)) +
  geom_histogram(bins = 20, fill = "forestgreen", colour = "black") +
  facet_wrap(~watershed) +
  labs(
    title = "Distribution of Stem Lengths by Watershed",
    x = "Stem Length (mm)",
    y = "Count"
  )
```

The `facet_wrap()` function creates separate panels for each value of the specified variable. This allows us to compare distributions across groups.

::: {.callout-tip}
## Question 6
How do stem lengths differ between watersheds? Which watershed shows more variability in stem lengths? Are the distributions similarly shaped?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 6
Based on the faceted histograms of stem lengths by watershed:

- **Differences between watersheds**: The distributions of stem lengths differ noticeably between watersheds. Watershed 1 appears to have generally shorter stem lengths with most values concentrated at the lower end of the range. Watershed 6 shows a broader distribution with stems generally longer than in Watershed 1.

- **Variability comparison**: Watershed 6 shows more variability in stem lengths, as evidenced by its wider spread across the x-axis. The distribution is less peaked and covers a broader range of values compared to Watershed 1.

- **Shape comparison**: The distributions are not similarly shaped. Watershed 1's distribution is more right-skewed (positively skewed) with a concentration of values at the lower end and a tail extending to the right. Watershed 6's distribution appears more symmetric and closer to a normal distribution, though still with some right skew.

These differences suggest that environmental conditions between the two watersheds may significantly impact maple seedling growth. Watershed 6 may provide more favorable or more variable growing conditions, resulting in generally longer stems with greater variability in length.
:::
:::

### Comparing leaf area and stem length

Let's examine the relationship between leaf area and stem length, comparing across watersheds:

```{r}
# Create a scatterplot of leaf area vs. stem length, coloured by watershed
ggplot(hbr_maples, aes(x = stem_length, y = corrected_leaf_area, colour = watershed)) +
  geom_point(alpha = 0.7) +
  labs(
    title = "Leaf Area vs. Stem Length",
    x = "Stem Length (mm)",
    y = "Corrected Leaf Area (cm²)",
    colour = "Watershed"
  )
```

Here, we've mapped the `watershed` variable to the `colour` aesthetic, which automatically creates a color-coded legend.

Let's add separate trend lines for each watershed:

```{r}
# Add separate trend lines for each watershed
ggplot(hbr_maples, aes(x = stem_length, y = corrected_leaf_area, colour = watershed)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Leaf Area vs. Stem Length",
    x = "Stem Length (mm)",
    y = "Corrected Leaf Area (cm²)",
    colour = "Watershed"
  )
```

When we include `colour = watershed` in the global aesthetics, ggplot2 automatically applies this grouping to all geometries, including `geom_smooth()`. This creates separate trend lines for each watershed.

::: {.callout-tip}
## Question 7
Is there a relationship between stem length and leaf area? Does this relationship differ between watersheds? What might explain these differences from an ecological perspective?
:::

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Answer 7
Based on the scatterplot examining the relationship between stem length and leaf area:

- **Relationship existence**: Yes, there is a clear positive relationship between stem length and leaf area. As stem length increases, leaf area tends to increase as well. This suggests that larger seedlings generally have both longer stems and larger leaves.

- **Differences between watersheds**: The relationship does differ between watersheds. The trend lines for each watershed have different slopes, indicating that the rate at which leaf area increases with stem length varies. Watershed 6 appears to have a steeper slope than Watershed 1, suggesting that for each unit increase in stem length, seedlings in Watershed 6 gain more leaf area than those in Watershed 1.

- **Ecological explanation**: These differences could be explained by several ecological factors:
  1. **Resource availability**: Watershed 6 may have more favorable growing conditions (e.g., better soil nutrients, more water, or optimal light conditions) that allow seedlings to allocate more resources to leaf production relative to stem growth.
  2. **Adaptation to local conditions**: Seedlings in different watersheds may have adapted different growth strategies in response to local environmental pressures.
  3. **Competition**: Different levels of competition in each watershed might influence how seedlings allocate resources between stem and leaf growth.
  4. **Genetic differences**: There could be genetic differences between maple populations in different watersheds that influence their growth patterns.

These findings highlight the importance of considering environmental context when studying plant growth relationships, as the same species can show different growth patterns in different habitats.
:::
:::

## Exercise 6: Take-home exercises

These exercises are designed for you to practice the visualisation techniques we've covered in this lab. You can complete them during the lab if you finish early, or at home for additional practice.

### Basic visualization practice

1. Create a histogram of the `water_temp` variable in the crabs dataset. Calculate and interpret its skewness and kurtosis.
2. Create boxplots comparing the `leaf_dry_mass` between watersheds in the maples dataset. What do you observe?
3. Create a scatterplot examining the relationship between `stem_dry_mass` and `leaf_dry_mass` in the maples dataset, with points coloured by watershed.


### Advanced challenge: `patchwork`

The patchwork package allows you to combine multiple plots into a single figure. This is useful for creating complex visualisations that tell a story about your data.

```{r}
# Load the patchwork package
library(patchwork)
```

Let's create a few plots and then combine them:

```{r}
# Create multiple plots
p1 <- ggplot(pie_crab, aes(x = size)) +
  geom_histogram(fill = "skyblue", colour = "black") +
  labs(title = "Distribution of Crab Sizes")

p2 <- ggplot(pie_crab, aes(x = latitude, y = size)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Size vs. Latitude")

p3 <- ggplot(pie_crab, aes(x = site, y = size)) +
  geom_boxplot(fill = "skyblue") +
  labs(title = "Size by Site")

# Combine plots
p1 / (p2 + p3)
```

The patchwork syntax is intuitive:
- `/` arranges plots vertically (one above the other)
- `+` arranges plots horizontally (side by side)
- You can use parentheses to control the layout

Now, try these exercises:

1. Create a combined plot using patchwork that shows:
   - A histogram of stem lengths
   - A scatterplot of stem length vs. leaf area
   - Boxplots of stem lengths by watershed
   - Arrange these plots in a 2x2 grid

2. Create a combined plot that tells a story about the relationship between temperature and crab size:
   - A scatterplot of air temperature vs. crab size
   - A scatterplot of water temperature vs. crab size
   - A boxplot of crab sizes by site
   - Arrange the scatterplots side by side and the boxplot below them

::: {.content-visible when-profile="solution"}
::: {.callout-warning}
## Solutions to Take-home Exercises

### Basic Exercises

1. Histogram of water temperature with skewness and kurtosis:

```{r}
# Create histogram of water temperature
ggplot(pie_crab, aes(x = water_temp)) +
  geom_histogram(bins = 15, fill = "lightblue", color = "black") +
  labs(
    title = "Distribution of Water Temperature",
    x = "Water Temperature (°C)",
    y = "Count"
  )

# Calculate skewness and kurtosis
skew_water <- skewness(pie_crab$water_temp)
kurt_water <- kurtosis(pie_crab$water_temp)

cat("Skewness of water temperature:", skew_water, "\n")
cat("Kurtosis of water temperature:", kurt_water, "\n")
```

**Interpretation**: The water temperature distribution has a skewness of approximately 0.5, indicating it is right-skewed (though only moderately). The kurtosis value of approximately 2.5 suggests the distribution is slightly less peaked than a normal distribution with lighter tails.

2. Boxplots of leaf dry mass by watershed:

```{r}
# Create boxplots of leaf dry mass by watershed
ggplot(hbr_maples, aes(x = watershed, y = leaf_dry_mass)) +
  geom_boxplot(fill = "lightgreen") +
  labs(
    title = "Leaf Dry Mass by Watershed",
    x = "Watershed",
    y = "Leaf Dry Mass (g)"
  )
```

**Observation**: The boxplots show that Watershed 6 has higher median leaf dry mass compared to Watershed 1. There appears to be more variability in Watershed 6 as indicated by the larger interquartile range. This pattern is consistent with what we observed for stem lengths, suggesting that Watershed 6 generally supports larger, more variable maple seedling growth.

3. Scatterplot of stem dry mass vs. leaf dry mass:

```{r}
# Create scatterplot of stem dry mass vs. leaf dry mass
ggplot(hbr_maples, aes(x = stem_dry_mass, y = leaf_dry_mass, color = watershed)) +
  geom_point(alpha = 0.7) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Relationship Between Stem and Leaf Dry Mass",
    x = "Stem Dry Mass (g)",
    y = "Leaf Dry Mass (g)",
    color = "Watershed"
  )
```

**Observation**: There appears to be a strong positive relationship between stem dry mass and leaf dry mass, suggesting that seedlings with larger stems also have more leaf mass. The relationship differs between watersheds, with Watershed 6 showing a steeper slope. This indicates that for the same increase in stem dry mass, seedlings in Watershed 6 tend to have a greater increase in leaf dry mass compared to those in Watershed 1.

### Advanced Exercises

1. Combined plot of stem length visualisations:

```{r}
# Create individual plots
p1 <- ggplot(hbr_maples, aes(x = stem_length)) +
  geom_histogram(fill = "forestgreen", color = "black") +
  labs(title = "Distribution of Stem Lengths")

p2 <- ggplot(hbr_maples, aes(x = stem_length, y = corrected_leaf_area)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Stem Length vs. Leaf Area")

p3 <- ggplot(hbr_maples, aes(x = watershed, y = stem_length)) +
  geom_boxplot(fill = "forestgreen") +
  labs(title = "Stem Length by Watershed")

# Combine the plots
p1 / (p2 + p3)
```

2. Combined plot of temperature and crab size:

```{r}
# Create individual plots
p1 <- ggplot(pie_crab, aes(x = air_temp, y = size)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Size vs. Air Temperature")

p2 <- ggplot(pie_crab, aes(x = water_temp, y = size)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Size vs. Water Temperature")

p3 <- ggplot(pie_crab, aes(x = site, y = size)) +
  geom_boxplot(fill = "skyblue") +
  labs(title = "Size by Site")

# Combine the plots
(p1 + p2) / p3
```

**Story**: These plots together tell us that crab size increases with both air and water temperature, with a stronger relationship for water temperature (as shown by the steeper slope). The boxplot shows that sites with higher temperatures (like Oregon, which is at a lower latitude) tend to have larger crabs, while sites with lower temperatures (like Woods Hole, at higher latitude) have smaller crabs. This suggests that temperature is an important factor influencing crab size, which aligns with our earlier finding of a negative relationship between latitude and size.
:::
:::

## Summary

In this lab, we've explored how to create and customize various types of visualisations using ggplot2. We've learned:

1. The Grammar of Graphics approach to building visualisations layer by layer
2. How to create and interpret histograms, density plots, boxplots, and scatterplots
3. How to quantify and interpret distribution properties like skewness and kurtosis
4. How to compare groups using boxplots and faceting
5. How to examine relationships between variables using scatterplots and trend lines
6. How to combine multiple plots using the patchwork package

These skills will be valuable for exploring and presenting data in future labs and assignments.

## Additional Resources

- [R for Data Science - Data Visualisation chapter](https://r4ds.had.co.nz/data-visualisation.html)
- [ggplot2 documentation](https://ggplot2.tidyverse.org/)
- [patchwork package documentation](https://patchwork.data-imaginist.com/)
- [R Graph Gallery](https://www.r-graph-gallery.com/) - Examples of various visualisations in R
- [Cookbook for R - Graphs](http://www.cookbook-r.com/Graphs/) - Recipes for common visualisation tasks
